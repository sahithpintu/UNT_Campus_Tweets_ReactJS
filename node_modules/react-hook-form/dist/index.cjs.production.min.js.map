{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/logic/isErrorStateChanged.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/useField.ts","../src/logic/getInputValue.ts","../src/controller.tsx","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return valueAsNumber\n      ? +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields),\n    setDirtyFields(defaultValues, values, dirtyFields),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb = true,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues, isWeb)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !isPrimitive(value) && set(shallowFieldsStateRef.current, name, value);\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n    found = true,\n  ): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            isFieldWatched(name as FieldName<TFieldValues>);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current, isWeb),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[]).map((data) => {\n    if (isObject(data)) {\n      const object: Record<string, boolean> = {};\n\n      for (const key in data) {\n        object[key] = true;\n      }\n\n      return object;\n    }\n\n    return true;\n  });\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport cloneObject from './utils/cloneObject';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const value of values) {\n      if (typeof value === 'object') {\n        if (keyName in value) {\n          console.warn(\n            `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n          );\n\n          break;\n        }\n      } else {\n        console.warn(\n          `📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`,\n        );\n\n        break;\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const omitKey = <T extends (Partial<TFieldArrayValues> | undefined)[]>(\n    fields: T,\n  ) => fields.map(({ [keyName]: omitted, ...rest } = {}) => rest);\n\n  fieldArrayNamesRef.current.add(name);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [],\n  );\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, getFieldArrayValue()).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...getFieldArrayValue()[index],\n        ...item,\n      }),\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (\n    fieldArrayParentName &&\n    !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n  ) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      cloneObject(get(defaultValuesRef.current, fieldArrayParentName)),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    if (updatedFieldArrayValues) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      isDirty: isFormDirty(name, omitKey(updatedFormValues)),\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...getCurrentFieldsValues(),\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        value,\n      ]);\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: (\n      | Partial<TFieldArrayValues>\n      | undefined\n    )[] = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = <TFieldValues>(\n        data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n      ) => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(\n          data || defaultValuesRef.current,\n          name,\n        );\n        setFields(mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name, fields]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport { ControllerProps, FieldValues, UseField } from './types';\n\nexport function useField<\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TFieldValues extends FieldValues = FieldValues\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: Exclude<\n  ControllerProps<TAs, TFieldValues>,\n  'as' | 'render'\n>): UseField<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched, errors, dirtyFields },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperty(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            'value',\n            {\n              set(data) {\n                setInputStateValue(data);\n                valueRef.current = data;\n              },\n              get() {\n                return valueRef.current;\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = !get(defaultValuesRef.current, name);\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    state: {\n      inValid: !get(errors, name),\n      isDirty: !!get(dirtyFields, name),\n      isTouched: !!get(touched, name),\n    },\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useField } from './useField';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field } = useField(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field)\n    : null;\n};\n\nexport { Controller };\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const updateValue = React.useState<unknown>()[1];\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return idRef.current\n    ? watchInternal(name, defaultValueRef.current, idRef.current)\n    : isUndefined(defaultValue)\n    ? isString(name)\n      ? get(defaultValuesRef.current, name)\n      : Array.isArray(name)\n      ? name.reduce(\n          (previous, inputName) => ({\n            ...previous,\n            [inputName]: get(defaultValuesRef.current, inputName),\n          }),\n          {},\n        )\n      : defaultValuesRef.current\n    : defaultValue;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","deepMerge","target","source","isPrimitive","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","[object Object]","shallowFieldsState","shouldUnregister","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","RegExp","validationData","isRegex","message","React.isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","types","async","required","maxLength","minLength","min","max","pattern","validate","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","cloneObject","isWeb","copy","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","window","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","toString","indexes","i","temp","splice","removeAtIndexes","sort","from","to","indexA","indexB","prepend","insert","fill","mapIds","keyName","generateId","useField","rules","control","onFocus","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","formStateRef","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","focus","onFocusRef","shouldValidate","React.useCallback","skipValidation","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperty","React.useEffect","onBlur","onChange","shouldDirty","state","inValid","isDirty","props","as","render","rest","componentProps","React.cloneElement","React.createElement","_a","children","Provider","focusIndexRef","isFormDirty","updateWatchedValue","resetFieldArrayFunctionRef","removeFieldEventListener","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","getValues","fieldArrayValuesRef","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","fields","setFields","omitKey","_b","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","setFieldArrayDirtyFields","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","argC","argD","pop","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","updateFormValues","remove","removeArrayAt","insertAt","resolver","context","shouldFocusError","criteriaMode","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","submitCount","isSubmitting","isSubmitSuccessful","observerRef","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","formValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","getNodeParentName","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","parentNodeName","currentError","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","fieldArrayValue","assignWatchFields","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrRegisterOptions","React.useMemo","watch","prop","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}